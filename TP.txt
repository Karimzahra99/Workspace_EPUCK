Github branching : https://idratherbewriting.com/learnapidoc/pubapis_github_desktop_client.html
https://git-scm.com/book/en/v2
https://the-turing-way.netlify.app/reproducible-research/vcs/vcs-workflow.html
https://education.github.com/git-cheat-sheet-education.pdf

To Merge User to master (user->master) : selectionner comme current branch "master" puis dans branch choisir branch to current branch et choisir la branch voulu
To Merge master to user (master->user) : selectionner comme current branch la branch voulu puis dans branch choisir branch to current branch et choisir la branch master 

https://www.gctronic.com/doc/index.php/e-puck2
https://www.gctronic.com/doc/index.php?title=e-puck2_robot_side_development

https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options
---------------------
https://mcuoneclipse.com/2013/04/14/text-data-and-bss-code-and-data-size-explained/
https://www.gctronic.com/doc/index.php?title=e-puck2#Firmware_update

STM32 -> RAM: 192 KB; Flash: 1024 KB

‘text’ is my code, vector table plus constants. Is what ends up in FLASH memory
‘data’ is for initialized variables, and it counts for RAM and FLASH. The linker allocates the data in FLASH which then is copied from ROM to RAM in the startup code.
‘bss’ is for the uninitialized data in RAM which is initialized with zero in the startup code.
text : Segment pour le programme en memoire Flash
data : Segment pour les variables globales et statiques initialisees non-nulles RAM (compte aussi pour Flash)
bss : Segment pour les variables globales et variables statiques non-initialisees ou initialisees nulles (RAM)

Stack (pile) : emplacement memoire utilisee lors de l'execution de certaines taches, notamment pour stocker les variables locales (RAM)
heap (tas) : emplacemement memoire pour les allocation dynamiques (RAM)
rodata : les donnes cosntantes qui seront inchangees (Flash)
isr_vector : table des vecteurs d'interruption (Flash)

Flash = non volatile
RAM = volatile

CCRAM (64KB) : RAM 2 fois plus petite que SRAM , mais plus rapide d'acces
SRAM (128KB) : RAM standard assez grosse mais peu rapide d'acces

memory map p71 Datasheet

dec = text + data + bss
text+data=flash
data+bss=RAM
-------------------------------------------
text = 1432 data = 4 bss = 1540 <-- bytes
Flash = 1436 / RAM = 1544 <---- bytes
-------------------------------------------
Flash 1.4%
RAM 0.8%
-------------------------------------------
LED1 => PD5 Opendrain (front) (+pullup resistor optional)
LED3 => PD6 Opendrain (right) (+pullup resistor optional)
LED7 => PD11 Opendrain (left) (+pullup resistor optional)
LED5 => PD10 Opendrain (back) (+pullup resistor optional)
ODR = 0 => LED ON
ODR = 1 => LED OFF
-------------------------------------------
FRONTLED => PD14 Opendrain+pullup resistor ou push-pull (front)
ODR = 0 => LED OFF (voir shcema electrique, ODR est la sortie de l'inverseur CMOS (pushpull))
ODR = 1 => LED ON 
BODYLED => PB2  Opendrain+pullup resistor ou push-pull (peripheral)
ODR = 0 => LED OFF (voir shcema electrique, ODR est la sortie de l'inverseur CMOS (pushpull))
ODR = 1 => LED ON 
-------------------------------------------
Masquage 

Pour Set un bit a 1 : OR 
Masque : 00001000 : le bit 4 sera mit a 1
Notation : a|b
storage |= 1 << n; 

Pour Clear un bit a 0 : AND
Masque : 11110111 : le bit 4 sera mit a 0
Notation : a&b
storage &= ~(1 << n);

Pour Echanger un bit : XOR
Masque : 00001000 : le bit 4 sera echange
Notation : a^b
storage ^= 1 << n;

Inverser tout les bits : NOT/Unary (Complement a 1)
Notation : ~a

Extractracteur de bit 
bit = storage & (1 << n); on recupere le bit a la position n

Left Shift
operand << cb on decale = le nombre de 0 a rajouter a droite
operand <<= decalage
les bits de poids forts sont perdus

Right Shift
operand >> cb on decale = le nombre de 0 a rajoute a gauche
opera >>= decalage
les bits de poids faibles sont perdus

Operateur ternaire (if compact)
condition ? value_if_true : value_if_false

Bitwise 
a&b bitwise and
a|b bitwise or
a^b bitwise xor
~a  bitwise not
Logical
a && b logical and
a || b logical or
a != b logical xor
!a     logical not

Rappel pointeur
int* a = nullptr; //initialisation
int b = 35;
a = &b; // pointe sur l'adresse de b
*a // le contenue a l'adresse pointe par a
a // une adresse
foo->bar // equivalent a (*foo).bar // le contenu d'un champs d'une structure ou classe pointe par foo

static variable : variable avec temps de vie egale au programme, uniquement accessible dans sa scope de declaration
variable global : variable accessible et modifiable partout dans le programme, temps de vie egale au programme
variable locale : existe que dans son scope de declaration
cast : convertir un data type en un autre
implicite cast : realise par le compilateur automatiquement
int a(5), b(7);
double c = a+b; // le compilateur fait une addition en double
explicite cast : on precise le type de l'expression
(data_type)expression; //z = (float)x/(float)y; //z est un float alors que x et y sont des int

int-> unsigned int -> long -> unsigned long -> unsigned long long -> float -> double -> long double
char : 1 byte
unsigned char : 1 byte
signed char : 1 byte 
int : 4 bytes
unsigned int : 4 bytes
short : 2 bytes
unsigned short : 2 bytes
long : 8 bytes
unsigned long : 8 bytes
float : 4 bytes
double : 8 bytes 
long double : 10 bytes
On stm32 : 
long int a la meme taille que int
unsigned long a la meme taille que unsigned int
Pour la FPU (il faut l'activer), elle fonctionne uniquement en single precision donc les doubles seront convertit automatique en float
Cette conversion soft double->float peut prendre bcp de cycles (__aeabi_fmul)
Sans FPU : arm-none-eabi-gcc -save-temps=obj -mcpu=cortex-m4 -c essai.c -o essai.o
Avec FPU : arm-none-eabi-gcc -save-temps=obj -mcpu=cortex-m4 -c essai.c -o essai.o -mfloat-abi=hard
-mfpu=vfpv2 

volatile uint16_t -> empeche le compilateur d'optimiser

half-words (16 bits) or words (32 bits)

int has_nukes = 0x0001; //format hexadecimal
const int has_nukes = 0b00000000000000000000000000000001; //format binaire

------------------------------
Eclipse Shortcut
indent left : shift+tab
indent right : CTLR+i
indent left block : shift+tab
ident right block : tab
Build all : CTRL+B 
Comment/decomment : CTRL+/
-----------------------------

GPIO (GPIO port struc p268 RM)
STM32 Overview p19 Datasheet
Clock Tree p216 RM

Active la clock du port 	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIODEN;
Config le port/pin		gpio_config_output_opendrain(LED_USED); //gpio_config_output_pushpull(FRONT_LED);

RCC AHB1 (32bits) peripheral clock register (RCC_AHB1ENR) p180 RM
Registre pour activer les clocks des differents ports dont les GPIOs (qui sont les premieres bits du registre)
0 : clock off
1 : clock on
Reset value: 0x0010 0000

MODER (32bits): Mode configuration (input, output, alternate function or analog). p281 RM
00: Input (reset state)				port->MODER &= ~(3 << (pin * 2))
01: General purpose output mode			port->MODER = (port->MODER & ~(3 << (pin * 2))) | (1 << (pin * 2)); //(port->MODER & ~(3 << (pin * 2))) pour mettre a 0 les deux bits //| (1 << (pin * 2)) apres avoir mit a 0 les deux bits on les set comme voulu 
10: Alternate function mode			port->MODER = (port->MODER & ~(3 << (pin * 2))) | (2 << (pin * 2));
11: Analog mode					port->MODER = (port->MODER & ~(3 << (pin * 2))) | (3 << (pin * 2));
Reset 0xA800 0000 for port A
Reset 0x0000 0280 for port B
Reset 0x0000 0000 for other ports

OTYPER (16bits/ en realite 32 bits mais le sup est pas used): Output type (push-pull or open-drain)
0: Output push-pull (reset state)	port->OTYPER &= ~(1 << pin);	
1: Output open-drain			port->OTYPER |= (1 << pin);
Reset value: 0x0000 0000 //par defaut toutes les pins sont en pushpull

PUPDR (32bits): pull type (pull-up, pull-down or floating) //on rajoute une resistance pull up pour open drain
00: No pull-up, pull-down	port->PUPDR &= ~(3 << (pin * 2));
01: Pull-up			port->PUPDR = (port->PUPDR & ~(3 << (pin * 2))) | (1 << (pin * 2)); //on clear d'abord les deux bits puis on les set comme on veut
10: Pull-down			port->PUPDR = (port->PUPDR & ~(3 << (pin * 2))) | (2 << (pin * 2));
11: Reserved


OSPEEDR (32bits): output speed (4 levels) Pas utile quand le port est config en entree
00: Low speed			port->OSPEEDR &= ~(3 << (pin * 2));
01: Medium speed		port->OSPEEDR = (port->OSPEEDR & ~(3 << (pin * 2))) | (1 << (pin * 2));
10: High speed			port->OSPEEDR = (port->OSPEEDR & ~(3 << (pin * 2))) | (2 << (pin * 2)); 
11: Very high speed		port->OSPEEDR = (port->OSPEEDR & ~(3 << (pin * 2))) | (3 << (pin * 2)); 
0x0C00 0000 for port A		
0x0000 00C0 for port B
0x0000 0000 for other ports

GPIO->IDR (16bits /32 en realite mais up reserved) Input data register. //pour lire les valeurs
		port->IDR & (1<<pin);

GPIO->ODR (16 bits /32 en realite mais up reserved) Output data register. //pour ecrire les valeurs
		port->ODR &= ~(1 << pin); // met le bit a 0
		port->ODR |= (1 << pin); // met le bit a 1

GPIO->BSRR (32bits) Bit set/reset register //pour ecrire des valeurs dans ODR sans passer par des masques pour pas affecter les autres bits
31 a 16 : Br (Reset) si on met le bit a 1 alors le bit correspondant dans ODR sera mit a 0
15 a 0 : BS (Set) si on met le bit a 1 alors le bit correspondant dans ODR sera mit a 1
	port->BSRR = (1 << (pin + 16)); //reset
	port->BSRR = (1 << pin); //set
Mieux vaut passer par BSRR quand on veut modif ODR (output) plutot que d'appliquer un masque dans ODR

----------------------
Selector (16 positions)
Sel0 GPIOC, 13
Sel1 GPIOC, 14
Sel2 GPIOC, 15
Sel3 GPIOD, 4
Selecteur a 0 quand le tic est a droite

Internal PD of F407  + En entree on configure le pin avec une pulldown resistor par securite => comment pour dire de connecte avec push down interne du stm32
bool does not name a type ? _Bool
Wimplicit ?

-----------------------
Timer diagram p697 RM
Comparaison des timers table 4 Datasheet
Timer clocks diagram p515 RM
RCC_AHB1ENR (32bits) pour activer les clocks des gpios p180 Datasheet
RCC_APB1ENR (32bits) pour activer les clocks des timers p183 Datasheet

Timer 7 => bit 5 de RCC_APB1ENR //p237 RM
Nested vectored interrupt controller (NVIC), fait partie du Cortex M4, permet de gerer les interruptions
p62 DatasheetCortex p220 DatasheetGenericCortex
Vector table p372 Datasheet

p237 RM => pour le registre APB1
RCC->APB1ENR |= RCC_APB1ENR_TIM7EN; //on active la clock du timer 7 // on trouve la clock du timer a partir de p19 Datasheet
NVIC_EnableIRQ(TIM7_IRQn); //on active les interruptions du timer7

Registres du timer7 p703 Datasheet (TIM6 et TIM7 registers)

TIMx_DIER (16bits) -> bit 0 = UIE = Update interrupt enable
TIM7->DIER |= TIM_DIER_UIE;

TIMx_CR1 (16bits) -> bit 0 = CEN = Counter enable //permet d'activer le compteur
TIM7->CR1 |= TIM_CR1_CEN; //realise en dernier

TIMx_PSC (16bits) //Registre pour le prescaler / permet de diviser la clock pour le timer
TIM7->PSC = PRESCALER - 1;

TIMx_ARR (16bits) //TIM6&TIM7 auto-reload register
TIM7->ARR = COUNTER_MAX - 1; //la valeur maximal du compteur

Clock maximal APB1 42MHz (low speed)
Clock maximal APB2 84MHz (high speed) p19 Datasheet
Dans SystemClock_Config() on trouve les prescaleurs de APB1 et APB2, les prescaleurs
Prescaler de APB2 = 2 or 168MHz (System Clock) donc 84MHz
Prescaler de APB1 = 4 donc 168/4 = 42 MHz comme clock pour les peripheriques
Pour les timers si le prescaler de APB1 est different de 1 alors on multiplie par 2 le resultat de 168/Prescaleur_APB1 et on obtient donc 84MHz

D'abord on configure l'AHB1 puis ensuite les APB , ensuite configure les clocks des peripheriques/timers
=================================================================================================================================================================
PWM definit par raport a frequence et rapport cyclique (duty cycle => 75% = 75% a l'etat 1 et 25% a l'etat 0)
Schema registre PWM p604 RM
Registre PWM p634  RM
Moteurs pas a pas possede 2 phases, pont en H pour finir la puissance necessaire

Fichiers generees : le .i, .s, .o
.i : preprocesseur qui combine .h et .c //ce fichier a la meme syntaxe qu'un .c
.s : compilateur a partir du .i cree le .s //le language c est transforme en language assembleur
.o : assembleur cree .o a partir du point .s //le language assembleur est transforme en language machine

arm-none-eabi-gcc -save-temps=obj -mcpu=cortex-m4 -c test.c -o test.o
Produit .i .s et .o

-----------------------------------------------
Assembleur [r7,#4] => adresse pointe par r7+4
La pile est descendant, on rajoute les elements vers le bas, la pile est la partie haute de la RAM
Le stack pointer pointe au debut vers le haut de la pile

push r7 => on met r7 sur la pile pour le preserver
sub sp,sp #20 => reserve 20 bytes (equivalent a 5 registres 32 bites), on prepare de la place pour les variables de la fonction (dans ce cas le main avec ses variables locales)
add r7 , sp, #0 => r7 prend l'adresse du stack pointer
mov r3, #0 => on met 0 dans r3
str r3, [r7, #4] => on store r3 dans la pile a l'adresse r7+4 (un registre 32bits au dessus de r7), qui represente la variable out
movs r3, #0 => on remet 0 dans r3
str r3, [r7, #12] => on met r3 dans la pile a l'adresse r7+12 (3 registre plus haut que r7) represente la variable i
b .L2 => branche au label L2

L5:
movs r3, #0 => on met 0 dans r3
str r3, [r7, #8] => on met r3 dans la pile a deux registre plus haute que r7 (donc r7->out->j->i), r3 represente j, on a initialise j et on la stocke dans la pile
b .L3 => on branche vers le label L3

.L4:
ldr r2, [r7, #12] on recupere i de la pile dans r2
ldr r3, [r7, #8] on recupere j de la pile dans r3
add r3, r3, r2 on fait r3=i+j;
ldr r2, [r7, #4] on recupere out dans r2
add r3, r3, r2 on fait r3 = r2+r3; // out= out+i+j
str r3, [r7, #4] on met le resultat a la pile la ou se trouve out
ldr r3, [r7, #8] on recupere j
adds r3, r3, #1 on fait j+1
str r3, [r7, #8] on remet la nouvelle valeur de j dans la pile a l'adresse ou ce trouve j

.L3:
ldr r3, [r7, #8] => on recupere j de la pile et on le met dans r3
cmp r3, #9 => on compare j avec 9
ble .L4 => verification j<10 si oui on branch vers L4
ldr r3, [r7, #12] on a finit la boucle for interne avec la variable j, donc on recupere i de la pile
adds r3, r3, #1 //i=i+1
str r3, [r7, #12] //on remet la nouvelle valeur de i dans la pile

.L2:
ldr r3, [r7, #12] => on recharge la valeur de i dans r3
cmp r3, #9 => on compare i avec 9
ble .L5 => ble = branch less equal, si i plus petit ou egal au saute au label L5 (on verifie i<10, si oui on rendre dans la deuxieme boucle for)
ldr r3, [r7, #4]  on a finit les deux boucles, on recupere out
mov r0, r3 //on met out dans r3 dans r0 car r0 est le registre dans lequel on rend toujours les valeurs pour le return de la fonction
adds r7, r7, #20 => on additione r7+20 , r7 pointe vers le bas de la pile maintenant il pointe vers le haut de la pile
mov sp, r7 on refait pointe le sp vers le haut de la pile
pop {r7} on recupere r7 qu'on avait mit au tout debut sur la pile
bx lr //BX LR = Return from function call
.size main, .-main

ATTENTION les valeurs de i,j,out se trouvent toujours dans la pile, elles ne sont pas effaces (tjr initialise les variables et clear les registres apres utilisations <= pas tjr faisable car c'est le compilateur qui fait ca)

Si on initialise plus de variable sub sp, sp, #XX on a XX qui augmente
----------------
#define remplacer par le preprocesseur
Dans les .i les define on deja etait remplace par leurs valeurs numeriques.
Le compilateur utilise pas les define, les preprocesseur remplace tout 
---------------------------------------------
arm-none-eabi-as test.s -o test.o
arm-none-eabi-gcc -save-temps=obj -mcpu=cortex-m4 -c test.c -o test.o -v
---------------------------------------------
-Wall : tt les warning
-Wunused-variable : les variables non utilises
-Wreturn-type : Active un warning concernant le type de retour de la fonction
https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options
--------------------------
O0 optimisation pour le temps de compilation (exec time et code size augmente mais memory usage et compile time reduced) //pas d'optimisation
O1 optimisation pour la taille de code et le temps d'execution (exec time et code size reduit mais memory usage et compile time augmente) //increase execution speed
O2 optimisation pour taille de code et super optimisation pour exec time //increase execution speed
O3 optimisation pour taille du code et mega optimisation pour exec time mais plus de memory usage et augmente fortement le temps de compilation) //increase execution speed
https://www.rapidtables.com/code/linux/gcc/gcc-o.html
funroll loops on evite les instructions de branchements en calculant tout les cas dans le code //que si le nombre d'itterations est connu a l'avance //Dangereux pour le systeme embarquees
funroll loops -O3 //inutile car 03 active funroll loops 
--------------------------------------------
Comment on sait que PD14 est pour PWM ? car une des alternate function est un timer et donc on peut creer un signal PWM avec un timer
PD14 -> tim4CH3 datasheet table 7 (p47) => tableau qui donne les alternate functions de tt les pins
tableau generale des liens entre peripheriques p19 datasheet
tableau clock p216 RM

Le pin PD14 est reliee a la front LED et presente une alternate function pour le TIM4_CH3 (p65 datasheet => tableau qui donne les bits pour alternate function)
Alternate function maping table 9 p65 Datasheet => tableau pour trouver la valeur a set dans le registre AFR => TIM4_CH3 => il faut set AF2. Comme c'est PD14, il faudra changer dans AFRH
p273 RM => figure 27 montre quelle bit pour AFR pour l'alternate function associe

On configure d'abord la PIN en mode alternate function dans MODER //10 en binaire
Ensuite dans AFR, qui est le registre pour configurer le type de alternate function, on configure l'alternate function qu'on veut  

Le output PWM est high quand le lorsque le timer atteint la valeur "OC3 Compare Value" a "Timer counter max"
Seuls des pins specifiques peuvent etre utilises pour PWM => table 4 datasheet (p32) : tableau qui donne les specs des timers et en dessous du tableau quelles timer pour PWM

GPIO alternate function low register (GPIOx_AFRL) (32 bits)
Chaque pin a 4 bits dediees (pin 0 a 7)			port->AFR[0] |= (af_number << (pin * 4));
Reset value: 0x0000 0000

GPIO alternate function high register (GPIOx_AFRH) (32 bits) p286 RM
Chaque pin a 4 bits dediees (pin 8 a 15)		port->AFR[1] |= (af_number << ((pin - 8) * 4));
Reset value: 0x0000 0000

TIMx control register 1 (TIMx_CR1) (16bits) //p625 RM (registres TIM 2,3,4,5) //sert a activer le timer
On met a 1 le bit CEN (bit0 du registre) qui active le compteur		TIM4->CR1 |= TIM_CR1_CEN;
Reset value: 0x0000

Figure 161 p604 RM pour les registres necessaire pour faire marche le PWM sur timer 4 : CCMR2, CCR3, CCER
The PWM mode can be selected independently on each channel (one PWM per OCx output) by writing 110 (PWM mode 1) or ‘111 (PWM mode 2) in the OCxM bits in the TIMx_CCMRx register.
PWM Timer 4 p608 RM <= explication PWM pour Timer 2,3,4,5 => il faut set les bits OCxM et OCxPE pour utiliser PWM

Le bit de polarité (TIMx_CCxP) définit si une sortie active signifie "High" ou "Low"
Frequence PWM : Valeur dans TIMx_ARR
Duty Cycle PWM : Valeur dans TIMx_CCRx

https://www.youtube.com/watch?v=qAZjdx71ePc <= explication du PWM sur STM32
110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1 else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
111: PWM mode 2 - In upcounting, channel 1 is inactive as long as TIMx_CNT<TIMx_CCR1 else active. In downcounting, channel 1 is active as long as TIMx_CNT>TIMx_CCR1 else inactive.
Explication pour la channel 1 p571 RM (valable pour channel 2,3,4) PWM Mode 1 Tant que TIM_CNT < TIM_CCRX alors le signal est high sinon low
PWM Mode 2 Tant que TIM_CNT < TIM_CCRX alors le signal est low sinon high

CCMR1 : pour les channels 1 et 2 (explication que pour la channel 1 dans RM)
CCMR2 : pour les channels 3 et 4 

TIMx capture/compare mode register 2 (TIMx_CCMR2) (16 bits/ p637 RM pour TIM4)
p635 RM les bits OC3M (bit 4 a 6) prennent la valeur du PWM Mode 		TIM4->CCMR2 |=(0x6U << TIM_CCMR2_OC3M_Pos); //6 represent 0b110 la valeur de PWM Mode 1
										TIM4->CCMR2 |=(0x7U << TIM_CCMR2_OC3M_Pos); //7 represente 0b111 la valeur de PWM Mode 2
OC3PE (bit3) doit etre set pour activer le preload				TIM4->CCMR2 |= TIM_CCMR2_OC3PE;
Reset value: 0x0000

TIMx capture/compare register 3 (TIMx_CCR3) (32 bits) //valeur de comparaison pour le channel 3
				TIM4->CCR3 = COUNTER_MAX_TIM4;
Reset value: 0x0000 0000

TIMx capture/compare enable register (TIMx_CCER) (16 bits) //pour activer le signal pwm sur la pin configure en sortie
			TIM4->CCER |= TIM_CCER_CC3E;
Reset value: 0x0000
----------------------------------------------------------------
Motors (moteur a 2 phases, pont en H pour l'alimenter)
4 signaux par moteur => a,b,c d
Diametre roue 4.15cm => distance parcouru par 1 tour de roue = 13cm
1 tour de roue = rotation de 360deg de la roue = 1000steps
20 steps per revolution of the motor combined with a gear reduction of 50:1 = un tour de roue == 50 tour de moteur
1 timer par roue => timer 6 et 7
Step motors sequence : https://www.youtube.com/watch?v=oueGS8MVvLQ
0000 = Sleep Mode 

Full Step Sequence (step = 90deg)
1010 North of Magnet at 45deg
0110 North of Magnet at -45deg
0101 North of Magnet at -135deg/225deg
1001 North of Magnet at 135deg/-225deg

Half Step Sequence (step = 45deg)
1010 North of Magnet at 45deg
0010 North of Magnet at 0deg
0110 North of Magnet at -45deg
0100 North of Magnet at -90deg
0101 North of Magnet at -135deg
0001 North of Magnet at -180/180deg
1001 North of Magnet at 135deg
1000 Nort of Magnet at 90deg

PE8 	Motor1 B
PE9 	Motor1 A
PE10 	Motor1 D
PE11 	Motor1 C

PE12 	Motor2 B
PE13 	Motor2 A
PE14 	Motor2 C
PE15 	Motor2 D //inversion

https://fr.wikipedia.org/wiki/Odométrie

Pour une trajectoire circulaire : 
e : ecart entre les roues (5.8 cm)
vd : vitesse roue droite
vg : vitesse roue gauche 
v : vitesse du robot
R : rayon du cercle

vg = (R-e/2)*v/R
vd = (R+e/2)*v/R

v = (vg+vd)/2
R = e/2*(vg+vd)/(vd-vg)

On active la clock du port E : RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
On config les GPIOs des moteurs en sortie & pushpull : gpio_config_output_pushpull(MOTOR_RIGHT_A);
Pk une inversion dans positon et speed pour left et right = inversion a l'interieur du moteur
---------------------
Only .o and .h
The idea is that the user will only use the .h file to look at the definitions and not at the implementation. He will also not have to compile this library every time. The disadvantage is that this new
library cannot be upgraded easily, as the entire executable needs to be replaced from the source file.
------------------------
arm-none-eabi-ar -q libtp2.a gpio.o motor.o timer.o selector.o
The command -ar regroup several .o files in one archive. We can use it to make any type of archive,
but it is generally used to create static library. This static library can then be given to other people
======================================================================================================================================================
RTOS (ChibiOS) = Real time operating system => predictable response time and deterministic behavior

Multiple tasks running concurrently. The ensemble of code, data and execution state of a task is called a thread

-Event-driven/Preemptive: The RTOS switches tasks when a higher priority task needs to run
to react on an event.

-Time-sharing: Tasks are run periodically for a given time slice creating the illusion of simultaneous execution. 
The strategy of running one thread after the other is called round-robin=> chaque preocessus une alloue une duree de temps egales, les threads sont traites de facon circulaire (sans priorite) => starvation free
Round Robin : https://www.youtube.com/watch?v=aWlQYllBZDs
Starvation : Une famine c'est lorsqu'un processus est perpétuellement privé des ressources nécessaires pour mener à bien ses travaux. Il se produit lorsqu'un algorithme n'est pas équitable, c'est-à-dire qu'il ne garantit pas à tous les threads souhaitant accéder à une section critique une probabilité non nulle d'y parvenir en un temps fini.

Only the threads with the highest priority are run until they terminate or block for an event. Threads with the same priority are run following round-robin
scheduling.

chThdSleepUntilWindowed() -> Execution+sleep dans une periode de temps fixe
chThdSleepMilliseconds() -> Execution + puis on fait un sleep a dure fixe

HAL : hardware abstraction layer : est un logiciel intermédiaire entre le système d'exploitation (OS = Windows MAC Linux) et le matériel informatique (Systeme embarquees).

Chibi/OS a besoin de trois fichiers de pour etre config : chconf.h (kernel config) & halconf.h (HAL config) & mcuconf.h (Config de la STM32 => activer les peripheriques et les clocks)

-----------------------------------
Dans board.chcfg (epuck2_board->cfg) on set LED1 (PD5) Level a LOW, on click sur le fichier puis generate files from config data et dans board.h on doit voir : PIN_ODR_LOW(GPIOD_LED1) ensuite on compile et upload
-----------------------------------
Au demarrage il y'a 2 Threads : Main a prio normal et Idle avec la prio la plus faible
-----------------------------------
Pour definir une thread, on doit definir sa taille sur la pille : static THD_WORKING_AREA(waMyThread, 128); //128 bytes sont reserves

chThdCreateStatic(waMyThread, sizeof(waMyThread), NORMALPRIO, MyThread, NULL); //NULL est un argument a donner a la thread
http://www.chibios.org/dokuwiki/doku.php?id=chibios:articles:howtos:createthread

// target extended-remote\\.\COM4 Epuck monitor => Baud rate 11500 / DTR SIGNAL ???????????
If you look at the electrical documentation of the e-puck2, you will see that the UART3 is connected
to the programmer. So in order to see what the e-puck2 is writing to the serial port, you need to
connect to the good USB com port of the programmer. There are only two, the first is the GDB
server and the second is the Serial Monitor. You can then use Hterm or RealTerm (both are on
the desktop) to read the data from the e-puck2. You only need to specify the correct com port, to
connect and to enable the DTR signal if the program doesn’t do it by default. The other parameters
such as the baudrate, parity, etc, are not relevant. If the DTR signal is not set, you will receive
nothing from the e-puck2.

time = chVTGetSystemTime();
        palTogglePad(GPIOD, GPIOD_LED_FRONT);
        chThdSleepUntilWindowed(time, time + MS2ST(10)); //execution+sleep time => attention si le temps d'execution est plus grand que le temps de execution+fenetre la thread ne sera jamais reappeler

chThdSleepMilliseconds(500); // sleep apres l'execution

----------------------------------
chThdSleepUntilWindowed(time, time + MS2ST(200)); //sinon on obtient une frequence trop grande et FRONT_LED sera tjr allume
MS2ST() is a macro which converts milliseconds to system ticks
----------------------------------
Commutation and period are correct
----------------------------------
La body LED blink seulement pour une duree du quanta de base (temps alloue par processus), car le temps d'execution de la thread depasse le temps alloue et la thread perd la main
Dans chconf.h on voit : CH_CFG_TIME_QUANTUM                 20
BodyLed ne sleep pas et utilise 100% de son temps alloué, les autres threads (de meme prio ou prio plus basse) ne peuvent donc pas etre execute
Quand BodyLed atteint le temps max, le systeme met en pause la thread BodyLed et change le contexte pour que FrontLed puisse s'executer
Une fois FrontLed executer, BodyLed termine son execution. Ainsi la periode de FrontLed est augmentée de CH_CFG_TIME_QUANTUM
----------------------------------
Dans la config pour front led : 200ms et les boucles nop pour body led : seul body led clignote (si on augmente la prio de body led) car etant de prio superieur et de periode plus longue avec des nop la thread ne perd jamais la main
Meme config mais si on augmente la prio de front led : la periode de front led est respecte car elle a la priorite superieur elle va interrompte BodyLed pour respecter son timing. 
----------------------------------
La front led ne clignote pas (meme avec plus grande prio) car body led desactive les interruptions durant son execution = un moyen brute force de garder la main
On peut se permettre de desactiver les interruptions seulement pendant un cours moment, dans BodyLed les interruptions sont desactives pendant tres longtemps, meme les stystemes ticks (le timer des interruptions) ne comptent plus normalement.
----------------------------------
IMU (Inertial measurement unit) IMU MPU 9250

Accelerometres 3 axes	Range : +- 2g, +- 4g, +-8g, +-16g
Gyroscope 3 axes	Range : +- 250dps, +- 500dps, +- 1000dps, +- 2000dps
Magnetometre 3 axes (present mais non utilisable) Range : +-4800microTesla
dps : degree per second

Utilise un interface I2C (deux lignes pour la communication : SDA pour les donnes et SCL pour la clock)

IMU INIT sur PD15
SDA sur PB9
SCL sur PB8

i2c_bus.c/i2c_bus.h : librairie pour communication I2C entre STM32(microcontrolleur) et MPU 9250 (IMU)
mpu9250.c/mpu9250.h : librairie qui gere les registres de config de l'IMU
imu.c/imu.h : capture des donnees de l'imu (Thread) et partage des donnees via (MessageBus)
main.c : calculation de l'acceleration a partir des valeurs de l'IMU

baudrate par port p35 datasheet

Pour visualiser les valeurs de l'imu, utiliser realterm/hterm
Choisir un baudrate de 115200 (en realite le baudrate a pas d'importance), choisir le port serie (COM 4), optionnellement active le DTR signal pour demarrer la transmission
Baudrate (bits par seconde) : determine la vitesse de transmission des bits sur la ligne
DTR signal : signal de control du protocol RS-232 envoye de l'ordi vers l'epuck pour lui dire que la ligne est prete pour recevoir des donnees et que l'epuck peut commencé la transmission

https://docs.microsoft.com/en-us/cpp/cpp/data-type-ranges?view=msvc-160
uint8_t : 0 a 255
uint16_t : 0 a 65'535
uint32_t : 0 a 2^32-1 = 4'294'967'295

__int8 : -128 to 127
__int16 : -32'768 to 32'767
__int32 : -2'147'483'648 to 2'147'483'647

#define STANDARD_GRAVITY    9.80665f -> definit la cste de gravite de type float

Pour imu_compute_offset il faut faire attention au type de variable pour utiliser le moins de place en memoire
On voit que nb_samples est un unit_16 (0 a 2^16-1) donc pour compter le nombre de echantillons on doit utiliser un uint_16 aussi (la variable i est de type uint16_t i)
Comme on veut faire une moyenne des echantillons on doit sommer bcp de valeurs (qui peuvent etre signes accel et vitesse angul peuvent etre negatives)
Pour trouver le type adequat pour stocker la somme on sait que int16 va de -2^16/2 (-32'678) a 2^16/2-1 (32'767, -1 car on prend en compte 0)
Le pire des cas serait que tout les echantillons (int16) on la valeur maximal donc 32767 et le nombre d'echantillons (u_int16) vaut au maximum 2^16-1 = 65535
Ce qui fait 65535*32767 = 2'147'385'345  qui est inferieur a 2^32/2-1 = 2'147'483'647 donc int32 est acceptable pour stocker la somme

Tableau pour stocker les sommes
int32_t temp_acc_offset[NB_AXIS] = {0};
int32_t temp_gyro_offset[NB_AXIS] = {0};
// NB_AXIS = 3 // int exemple [3] = {0}; -> creer un tableau 3x1 ou 1x3 avec 0 dans chaque case // exemple[0] = 32; met 32 dans le premier champ

On met -1g pour l'accel suivant z

Dans la datasheet de MPU9250 p22 paragraphe 4.6 et 4.7 on apprend que les accelerations et vitesse angulaire sont stockes sur 16 bits dans l'imu
Donc pour faire la conversion d'unite dans imu_compute_units(), on commence par soustraire les offset (imu_values.acc_raw[i] - imu_values.acc_offset[i])
Ensuite on multiplie le resultat par * STANDARD_GRAVITY (9.81 m/s^2) * ACC_RAW2G (2/32768) pour obtenir des m/s^2
Valeur stocker dans les registres de l'imu sont de type int16 donc entre -32768 et 32767 qui represente -2g a 2g
Donc en divisant par 32768 on obtient les valeurs entre -1 et 1 puis en multipliant par 2g on retrouve les valeurs entre -2g et 2g qui sont donc en m/s^2 
Acceleration Ax,Ay,Az en m/s^2

Pour les vitesses angulaires -32768 et 32767  represente -250deg/s et 250deg/s, apres avoir soustrait on multiplie par * DEG2RAD(GYRO_RAW2DPS)
GYRO_RAW2DPS = RES_250DPS(250) / MAX_INT16(32768) et la fonction DEG2RAD(deg) (deg / 180 * M_PI)
250*PI/180 = 4.36 rad/s
Donc en divisant par 32768 on obtient les valeurs entre -1 et 1 puis en multipliant par 4.36 rad/s on obtient les valeurs entre -4.36rad/s (-250deg/s) et 4.36 rad/s (250deg/s)
Gyroscope rates (vitesses angulaires) Gx,Gy,Gz en rad/s

chSysLock() => le scheduler va pas faire de changement de contexte et les interruptions sont desactives, utiliser pour qu'un thread critique puis terminer son execution
https://stackoverflow.com/questions/49596236/what-is-rtos-kernel-locking-and-when-do-you-need-to-use-it
Methode utilise pour chronometrer un temps d'execution (par exemple l'execution de la fonction atan2 ou les comparaisons de threshold dans l'exemple 2)

Exemple 1 IMU par trigo
Exemple 2 IMU par threshold -> possiblite de faire des thresholds variables / differents suivant les cas

Dans realterm
Premiere ligne  = valeurs brutes
Deuxieme ligne  = valeurs brutes - offset
Troisieme ligne = valeurs en m/s^2 et rad/s
========================================================================================================================================
Bluetooth/WiFi a travers le esp32 qui via une ligne UART va vers STM32
Serial Monitor (COM4) et GDB (COM5) vont de l'USB vers le programateur (STM32F413) puis vers STM32
USB virtuel (e-puck2 STM32F407 = COM6) vers STM32 directement

EXEPATH\dfu-util -d 0483:df11 -a 0 -s 0x08000000 -D e-puck2_main-processor.bin
Reset+bouton noir bootloader -> lancer la commande pour charger le programme -> mettre le selecteur vers le centre du robot puis presser sur reset -> ouvrir epuckmonitor.exe et charger le com6

GDB,UART,SPI sont des bluetooth com ports qui vont de l'ordre vers l'ESP32 puis avec l'UART3 vers STM32
GDB server, Serial Monitor, e-puck2 STM32F407 sont des USB com ports qui vont de l'ordi vers l'USB HUB puis le GDB et Serial monitor vont vers le programmer puis via UART3 vers STM32 et e-puck2 STM32F407 va de l'USB HUB vers STM32 sans passer par le programmeur et UART3

Interface DCMI p38 Datasheet : recuperer les lignes de l'image, la camera dicte le rythme d'acquisition
Camera sur l'epuck CMOS 640 X 480 pixel 30 FPS (Max) angle de vue 45 degree
Maximum data transfer rate 54 Mbyte/s at 54 MHz
Utilise la communication I2C (SCL PB8 SDA PB9)

Pointeur SD3 (UART3) pour USB et bluetooth sur realterm il faut prendre COM4
Pointeur SDU1 (USB) sur realterm il faut prendre COM6

UART peut envoyer des donnees meme si il y'a personne sur la ligne
USB une presence sur la ligne est obligatoire pour envoyer des donnees

Activer le bluetooth : hold the User button (next to the Reset button) while turning ON the robot
Bluetooth has a smaller transmission speed than USB. So if you transmit too many data too quickly, it is possible to loose data

cast (BaseSequentialStream *) is here to convert the type of the pointer into the good one

Big Endian Byte Order: The most significant byte (the "big end") of the data is placed at the byte with the lowest address. The rest of the data is placed in order in the next three bytes in memory.
Little Endian Byte Order: The least significant byte (the "little end") of the data is placed at the byte with the lowest address. The rest of the data is placed in order in the next three bytes in memory.

La thread PI regulateur a lieu a frequence fixe et n'attent pas de nouvelle image

La thread CaptureImage prend une photo et relache une semaphore apres avoir finit

La thread ProcessImage attend que la semaphore soit relache puis traite l'image

python path_to_the_script\plotFFT.py comX » (for Windows)
python3 path_to_the_script/plotFFT.py /dev/cu.usbmodemXXXX

python plotImage.py com4 for Windows

Pour mesurer le temps d'execution de fonctions, a mettre dans une thread
systime_t time; //hors de la boucle while
time = chVTGetSystemTime(); //dans boucle while
//-> Functions to measure <-//
chprintf((BaseSequentialStream *)&SDU1, "capture␣time␣=␣%d\n", chVTGetSystemTime()-time);

==============================================================================================================
Sound - 4micros (3 on top, one on back)

Shannon Nyquist Fsample > 2*Fmax 
Fsample (300Hz) -> Fmax = 150Hz

2^10 = 1024 -> -512,512
----------
On observe deux pics car la transformee de fourier d'un sinus donne deux dirac symetrique, il represente la frequence, on met 0 au centre car c'est symmetrique
Frequence max 150Hz car la frequence d'echantillonage est de 300Hz
----------
Frequency = 150-abs(position)*150/512
position est la valeur de la frequence sur plotFFT.py
On a pas des dirac parfait car il faut prendre une periode entiere du signal
----------
float sur stm32 => 32bits

Optimized = instructions en assembleur 




==============================================================================================================
questions :  

comment activer FPU -> activer par defaut
explication proccedure DFU & inversion moteur => Dany
difference systeme tic (vitesse d'horloge du microcontroleur et cycle (en terme de processeur) => Dany
expliquer l'influence du baudrate et dtr signal
#define MAX_INT16	32768.0f <- 32767 => Dany
